openapi: 3.0.0
info:
  version: 1.0.0
  title: Hosting API
  description: Hosting API for STORAGEHOST - Hosting Services
servers:
  - url: 'http://localhost:8080'
paths:
  /user:
    get:
      summary: 'Returns details about a particular user'
      operationId: listUser
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 'Sample response: Details about a user by ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/{id}/containers:
    get:
      summary: 'Returns a list of user containers'
      operationId: getContainerByUser
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 'List of containers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserContainers'
        '204':
          description: 'Empty list of containers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserContainers'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/{id}/vms:
    get:
      summary: 'Returns a list of user VMs'
      operationId: getVmByUser
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 'List of VMs'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserVms'
        '204':
          description: 'Empty list of VMs'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserVms'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /docker/create:
    post:
      summary: 'Create a Docker container'
      operationId: createContainer
      tags:
        - docker
      requestBody:
        description: Body of the POST request for creating a Docker container
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - username
                - password
                - networking
                - application
              properties:
                name:
                  description: Name of the container
                  type: string
                username:
                  description: Username
                  type: string
                password:
                  description: Password for the specified username
                  type: string
                networking:
                  description: Array of parameters like SSH access, specific configuration (IP)
                  type: array
                  format: array
                application:
                  description: Application that will run on the container
                  type: string
      responses:
        '201':
          description: 'Container ID on the Docker host'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerCreation'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /docker/{id}/info:
    get:
      summary: 'Get informations about a Docker container by its ID'
      operationId: getContainerInfo
      tags:
        - docker
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '201':
          description: 'Container details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerDetails'
        '404':
          description: 'Container not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /docker/{id}/power:
    patch:
      summary: 'Start or stop a container by its ID'
      operationId: containerStateManagement
      tags:
        - docker
      parameters:
        - name: id
          in: path
          description: ID of the container
          required: true
          schema:
            type: integer
            format: int32
        - name: action
          in: path
          description: Action (start/stop) the user wants to achieve
          required: true
          schema:
            type: string
            format: string
      responses:
        '204':
          description: ''
        '404':
          description: 'Container not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /docker/{id}/delete:
    delete:
      summary: 'Delete a container by its ID'
      operationId: deleteContainer
      tags:
        - docker
      parameters:
        - name: id
          in: path
          description: ID of the container
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: ''
        '404':
          description: 'Container not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vm/create:
    post:
      summary: 'Create a VM'
      operationId: createContainer
      tags:
        - vm
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - username
                - password
                - system
                - networking
                - storage
              properties:
                name:
                  description: Name of the container
                  type: string
                username:
                  description: Username
                  type: string
                password:
                  description: Password for the specified username
                  type: string
                system:
                  description: Array of parameters like number of vCPU, RAM, OS
                  type: array
                networking:
                  description: Array of parameters like SSH access, firewall, IP
                  type: array
                storage:
                  description: Array of storage settings (disk name, number of disks, disk size)
                  type: array

      responses:
        '201':
          description: 'VM settings'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmCreation'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vm/{id}/info:
    get:
      summary: 'Get informations about a VM by its ID'
      operationId: getVmInfo
      tags:
        - vm
      parameters:
        - name: id
          in: path
          description: ID of the VM
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 'VM details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmDetails'
        '404':
          description: 'VM not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vm/{id}/power:
    patch:
      summary: 'Start or stop a VM by its ID.'
      operationId: vmStateManagement
      tags:
        - vm
      parameters:
        - name: id
          in: path
          description: ID of the VM
          required: true
          schema:
            type: integer
            format: int32
        - name: action
          in: path
          description: Action (start/stop) the user wants to achieve
          required: true
          schema:
            type: string
            format: string
      responses:
        '204':
          description: ''
        '404':
          description: 'VM not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vm/{id}/delete:
    delete:
      summary: 'Delete a VM by its ID.'
      operationId: deleteVm
      tags:
        - vm
      parameters:
        - name: id
          in: path
          description: ID of the VM
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: ''
        '404':
          description: 'VM not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string

    UserContainers:
      type: object
      required:
        - id
        - name
        - number
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        number:
          type: integer
          format: int32
        tag:
          type: string

    UserVms:
      type: object
      required:
        - id
        - name
        - number
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        number:
          type: integer
          format: int32
        tag:
          type: string

    DockerCreation:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string


    DockerDetails:
      type: object
      required:
        - id
        - name
        - app
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        app:
          type: string
        tag:
          type: string

    VmCreation:
      type: object
      required:
        - id
        - name
        - ip
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        ip:
          type: string
        tag:
          type: string

    VmDetails:
      type: object
      required:
        - id
        - name
        - configuration
        - storage
        - ip
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        configuration:
          type: array
          format: array
        storage:
          type: array
          format: array
        ip:
          type: string
        tag:
          type: string

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string